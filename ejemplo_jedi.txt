Ejemplo 1:

Vértice | Grado | Color
------- | ----- | -----
0       | 3     | 2
1       | 4     | 3
2       | 2     | 1
3       | 1     | 2
4       | 5     | 4
5       | 3     | 1

Orden inicial:

{ {0, 3, 2}, {1, 4, 3}, {2, 2, 1}, {3, 1, 2}, {4, 5, 4}, {5, 3, 1} }

Ponderación: f = grado*(color)

0 => 3*(2) = 6
1 => 4*(3) = 12
2 => 2*(1) = 2
3 => 1*(2) = 2
4 => 5*(4) = 20
5 => 3*(1) = 3

=> orden = {4,1,0,5,2,3}

Ejemplo 2:

Vértice | Grado | Color
------- | ----- | -----
0       | 3     | 0
1       | 4     | 0
2       | 2     | 1
3       | 1     | 2
4       | 5     | 4
5       | 3     | 1

Orden inicial:

{ {0, 3, 0}, {1, 4, 0}, {2, 2, 1}, {3, 1, 2}, {4, 5, 4}, {5, 3, 1} }

Ponderación: f = grado*(color)

0 => 3*(0) = 0
1 => 4*(0) = 0
2 => 2*(1) = 4
3 => 1*(2) = 3
4 => 5*(4) = 25
5 => 3*(1) = 6

=> orden = {4,5,2,3,0,1}


/**
 * TAD para abstraer los elementos del vertice
 */
typedef struct {
    u32 id;
    u32 grado;
    u32 color;
} Vertice;

/**
 * Funcion auxiliar para comparar los vertices por su valor de F
 */
// int comparar_vertices(const void *a, const void *b) {
//     Vertice *v1 = (Vertice *)a;
//     Vertice *v2 = (Vertice *)b;
//     u32 f1 = v1->grado * (u32)(v1->color);
//     u32 f2 = v2->grado * (u32)(v2->color);
//     if (f1 > f2) {
//         // Si f1 es mayor que f2, f1 va primero
//         return -1;
//     }
//     if (f1 < f2) {
//         // Si f1 es menor que f2, f2 va primero
//         return 1;
//     }
//     return 0;
// }

// /**
//  * Orden Jedi
//  */
// char OrdenJedi(Grafo G, u32 *Orden, u32 *Color) {
//     u32 n = NumeroDeVertices(G);
//     u32 r = 0u;

//     //cuento la cantidad de colores que aparecen en color
//     for (u32 i = 0; i < n; i++) {
//         if (Color[i] >= r) {
//             r = Color[i] + 1;
//         }
//     }

//     // Crear el array de vertices
//     Vertice *vertices = (Vertice *)malloc(n * sizeof(Vertice));
//     if (vertices == NULL) {
//         fprintf(stderr, "No se pudo asignar memoria");
//         return 1; 
//     }

//     // Inicializar estructura
//     for (u32 i = 0; i < n; i++) {
//         vertices[i].id = i;
//         vertices[i].grado = Grado(i, G);
//         vertices[i].color = Color[i];
//     }

//     // Ordenar los vertices segun el valor de F
//     qsort(vertices, n, sizeof(Vertice), comparar_vertices);

//     // Agregar los vertices al array Orden en orden decreciente de F
//     for (u32 i = 0; i < n; i++) {
//         Orden[i] = vertices[i].id;
//     }

//     free(vertices);
//     return 0;
// }

char OrdenJedi(Grafo G,u32* Orden,u32* Color);
La función asume que Color y Orden apuntan auna region de memoeria con al menos 
$n$ lugares, donde $n$ es el numero de vertices de G y que la imagen de Color[]
es el conjunto ${0,1,...,r-1}$ para algun $r$.
Ordena indices llenando el array Orden en la forma indicada abajo.
Si todo anduvo bien devuelve el char 0, sino el char 1.
La forma de llenar Orden es al siguiente, asumiendo que r es la cantidad de 
colores que aparecen en Color[], definamos la función F: {0,1,...,r-1} -> Z dada por 

$$F(x) = x*(\sum_{i:Color[i]=x} Grado(i,G))

Entonces se ponen primero los indices i tal que Color[i] sea igual al color x 
tal que F(x) es el maximo de F, luego los indices i tal que Color[i] es el color 
x tal que F(x) es el sefundo mayor valor de F luego del maximo, etc

segunda interpretación:

si tengo el siguiente grafo:

0 -- 1 -- 2
|         |
3 -- 4 -- 5

Tiene 6 nodos, a los cuales le asigno los siguientes colores

Color = [0, 1, 1, 0, 2, 2]

Calculo de F(x)

para x=0
F(0) = 0*(grado(0) + grado(3)) = 0 * (2+2) = 0

para x=1
F(1) = 1*(grado(1) + grado(2) + grado(4)) = 1*(2+2+2) = 6

para x=2
F(2) = 2*(grado(5)+grado(4)) = 2*(2+2) = 8

Entonces: 
F(x) = 8 es mayor entonces 2 va primero, luego F(x)=6 para el 
color 1 y luego el color 0.

Array ordenado -> [4,5,1,2,0,3]