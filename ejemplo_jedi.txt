char OrdenJedi(Grafo G,u32* Orden,u32* Color);
La función asume que Color y Orden apuntan auna region de memoeria con al menos 
$n$ lugares, donde $n$ es el numero de vertices de G y que la imagen de Color[]
es el conjunto ${0,1,...,r-1}$ para algun $r$.
Ordena indices llenando el array Orden en la forma indicada abajo.
Si todo anduvo bien devuelve el char 0, sino el char 1.
La forma de llenar Orden es al siguiente, asumiendo que r es la cantidad de 
colores que aparecen en Color[], definamos la función F: {0,1,...,r-1} -> Z dada por 

$$F(x) = x*(\sum_{i:Color[i]=x} Grado(i,G))

Entonces se ponen primero los indices i tal que Color[i] sea igual al color x 
tal que F(x) es el maximo de F, luego los indices i tal que Color[i] es el color 
x tal que F(x) es el sefundo mayor valor de F luego del maximo, etc

si tengo el siguiente grafo:

0 -- 1 -- 2
|         |
3 -- 4 -- 5

Tiene 6 nodos, a los cuales le asigno los siguientes colores

Color = [0, 1, 1, 0, 2, 2]

Calculo de F(x)

para x=0
F(0) = 0*(grado(0) + grado(3)) = 0 * (2+2) = 0

para x=1
F(1) = 1*(grado(1) + grado(2)) = 1*(2+2) = 4

para x=2
F(2) = 2*(grado(5)+grado(4)) = 2*(2+2) = 8

Entonces: 
F(x) = 8 es mayor entonces 2 va primero, luego F(x)=4 para el 
color 1 y luego el color 0.

char OrdenJedi(Grafo G, u32* Orden, u32* Color) {
    u32 n = NumeroDeVertices(G);
    u32 r = 0;
    for (u32 i = 0; i < n; i++) {
        if (Color[i] > r) {
            r = Color[i];
        }
    }
    r++; // r es la cantidad de colores diferentes
    
    u32* F = malloc(r * sizeof(u32));
    if (F == NULL) {
        return 1; // error al asignar memoria
    }
    
    // Calculamos la función F para cada color
    for (u32 x = 0; x < r; x++) {
        F[x] = 0;
        for (u32 i = 0; i < n; i++) {
            if (Color[i] == x) {
                F[x] += Grado(i, G);
            }
        }
        F[x] *= x; // Multiplicamos por x
    }
    
    // Ordenamos los índices en el array Orden
    for (u32 k = 0; k < n; k++) {
        u32 max_f = 0;
        u32 max_color = 0;
        for (u32 x = 0; x < r; x++) {
            if (F[x] > max_f) {
                max_f = F[x];
                max_color = x;
            }
        }
        F[max_color] = 0; // Para que no lo volvamos a considerar
        for (u32 i = 0; i < n; i++) {
            if (Color[i] == max_color) {
                Orden[k] = i;
                k++;
            }
        }
    }
    
    free(F); // Liberamos memoria
    return 0; // Todo ha funcionado correctamente
}
______________________________________

0 -> grado(3) | color 0
1 -> grado(2) | color 1
2 -> grado(3) | color 1
3 -> grado(2) | color 0
4 -> grado(2) | color 2
5 -> grado(2) | color 2

Calculo de F(x)

para x=0
F(0) = 0*(3+2) = 0 * (5) = 0

para x=1
F(1) = 1*(2+3) = 1*(5) = 5

para x=2
F(2) = 2*(2+2) = 2*(2+2) = 8

Entonces, el orden es:
[4,5,1,2,0,3]